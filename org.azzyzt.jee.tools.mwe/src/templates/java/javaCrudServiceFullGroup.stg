<!
 * Copyright (c) 2011, Municipiality of Vienna, Austria
 *
 * Licensed under the EUPL, Version 1.1 or – as soon they
 * will be approved by the European Commission - subsequent
 * versions of the EUPL (the "Licence");
 * You may not use this work except in compliance with the
 * Licence.
 * 
 * For convenience a plain text copy of the English version 
 * of the Licence can be found in the file LICENCE.txt in
 * the top-level directory of this software distribution.
 * 
 * You may obtain a copy of the Licence in any of 22 European
 * Languages at:
 *
 * http://www.osor.eu/eupl
 *
 * Unless required by applicable law or agreed to in
 * writing, software distributed under the Licence is
 * distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied.
 * See the Licence for the specific language governing
 * permissions and limitations under the Licence.
 !>

<!
 * Code generation makes use of and bundles a copy of StringTemplate, 
 * which is
 * 
 * Copyright (c) 2008, Terence Parr
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or 
 * without modification, are permitted provided that the 
 * following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright 
 * notice, this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright 
 * notice, this list of conditions and the following disclaimer in 
 * the documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the author nor the names of its contributors 
 * may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 !>

group javaCrudServiceFullGroup : javaGroup;

@javaClass.extra_methods() ::= <<
@Override
<byIdHead(entity=mdt.properties.entity, dto=mdt.properties.dto)>
<byIdBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>

@Override
<listHead(entity=mdt.properties.entity, dto=mdt.properties.dto)>
<listBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>

@Override
<listXmlHead(entity=mdt.properties.entity, dto=mdt.properties.dto)>
<listXmlBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>

@Override
<storeHead(entity=mdt.properties.entity, dto=mdt.properties.dto)>
<storeBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>

@Override
<updateHead(entity=mdt.properties.entity, dto=mdt.properties.dto)>
<updateBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>

@Override
<deleteHead(entity=mdt.properties.entity, dto=mdt.properties.dto)>
<deleteBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>
>>

@javaInterface.extra_methods() ::= <<
<byIdHead(entity=mdt.properties.entity, dto=mdt.properties.dto)>;
<if(mdt.properties.entity.properties.isNamed)>

<byNameHead(entity=mdt.properties.entity, dto=mdt.properties.dto)>;<endif>

<listHead(entity=mdt.properties.entity, dto=mdt.properties.dto)>;

<listXmlHead(entity=mdt.properties.entity, dto=mdt.properties.dto)>;

<storeHead(entity=mdt.properties.entity, dto=mdt.properties.dto)>;

<updateHead(entity=mdt.properties.entity, dto=mdt.properties.dto)>;

<deleteHead(entity=mdt.properties.entity, dto=mdt.properties.dto)>;
>>

byIdHead(entity, dto) ::= <<
public <dto.simpleName> <entity.lcFirstSimpleName>ById(<dto.properties.idFieldType.simpleName> id)
    throws EntityNotFoundException, AccessDeniedException, InvalidIdException
>>

byIdBody(entity, dto) ::= <<
{
    <entity.simpleName> e = eao.findOrFail(<entity.simpleName>.class, id);
    return converter.fromEntity(e);
}
>>

listHead(entity, dto) ::= <<
public List\<<dto.simpleName>\> <entity.lcFirstSimpleName>List(QuerySpec qs)
    throws InvalidFieldException, AccessDeniedException, QuerySyntaxException, NotYetImplementedException
>>

listBody(entity, dto) ::= <<
{
    List\<<dto.simpleName>\> result = new ArrayList\<<dto.simpleName>\>();
    List\<<entity.simpleName>\> entities = eao.list(qs, <entity.simpleName>.class, emi);
    
    for (<entity.simpleName> e : entities) {
        <dto.simpleName> dto = converter.fromEntity(e);
        result.add(dto);
    }
    
    return result;
}
>>

listXmlHead(entity, dto) ::= <<
public List\<<dto.simpleName>\> <entity.lcFirstSimpleName>ListByXML(String querySpecXml)
    throws InvalidFieldException, AccessDeniedException, QuerySyntaxException, NotYetImplementedException
>>

listXmlBody(entity, dto) ::= <<
{
    QuerySpec qs = QuerySpec.fromXML(querySpecXml);
    
    List\<<dto.simpleName>\> result = new ArrayList\<<dto.simpleName>\>();
    List\<<entity.simpleName>\> entities = eao.list(qs, <entity.simpleName>.class, emi);
    
    for (<entity.simpleName> e : entities) {
        <dto.simpleName> dto = converter.fromEntity(e);
        result.add(dto);
    }
    
    return result;
}
>>

storeHead(entity, dto) ::= <<
public <dto.properties.idFieldType.simpleName> <entity.lcFirstSimpleName>Store(<dto.simpleName> dto)
    throws EntityNotFoundException, AccessDeniedException, EntityInstantiationException, InvalidIdException
>>

storeBody(entity, dto) ::= <<
{    
    <entity.simpleName> e = converter.fromDto(dto);

    // in case of embedded IDs, this must be the corresponding DTO
    <dto.properties.idFieldType.simpleName> id = e.getId();
    
    return id;
}
>>

updateHead(entity, dto) ::= <<
public void <entity.lcFirstSimpleName>Update(<dto.simpleName> dto)
    throws EntityNotFoundException, AccessDeniedException, EntityInstantiationException, InvalidIdException
>>

updateBody(entity, dto) ::= <<
{    
    <entity.lcFirstSimpleName>Store(dto);
}
>>

deleteHead(entity, dto) ::= <<
public void <entity.lcFirstSimpleName>Delete(<dto.properties.idFieldType.simpleName> id)
    throws EntityNotFoundException, AccessDeniedException, InvalidIdException
>>

deleteBody(entity, dto) ::= <<
{    
    // in case of embedded IDs, the ID must be converted from the corresponding DTO
    eao.delete(<entity.simpleName>.class, id);
}
>>