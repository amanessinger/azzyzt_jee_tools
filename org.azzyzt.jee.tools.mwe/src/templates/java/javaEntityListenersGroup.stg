group javaEntityListenersGroup : javaGroup;

@javaClass.extra_constructors() ::= <<
private static Map\<String, SimpleDateFormat\> dateFormatsByFormatString = new HashMap\<String, SimpleDateFormat\>();

private static Map\<Class\<?\>, Method\> createTimestampSetters = new HashMap\<Class\<?\>, Method\>();
private static Map\<Class\<?\>, Method\> modifyTimestampSetters = new HashMap\<Class\<?\>, Method\>();
private static Map\<Method, SimpleDateFormat\> stringDateFormats = new HashMap\<Method, SimpleDateFormat\>();
private static Map\<Method, DateFieldType\> dateFieldTypes = new HashMap\<Method, DateFieldType\>();

static {
    try {
        Method setter;
        
        <mdt.fields:create_entity_info()>
        
    } catch (Exception e) {
        e.printStackTrace();
    }
}

>>

create_entity_info() ::= <<
<if(attr.fieldType.usingCreateTimestampField)>

///////////////////////////////////////////////////
// <attr.fieldType.simpleName>
setter = <attr.fieldType.simpleName>.class.getDeclaredMethod("set<attr.fieldType.createTimestampField.ucName>", <attr.fieldType.createTimestampField.fieldType.simpleName>.class);
createTimestampSetters.put(<attr.fieldType.simpleName>.class, setter);
dateFieldTypes.put(setter, DateFieldType.<if(attr.fieldType.createTimestampField.stringField)>STRING);
stringDateFormats.put(setter, yieldDateFormat("<attr.fieldType.createTimestampField.createTimestampFormat>", dateFormatsByFormatString);
<elseif(attr.fieldType.createTimestampField.dateField)>DATE);
<elseif(attr.fieldType.createTimestampField.calendarField)>CALENDAR);
<endif>

<endif>

<if(attr.fieldType.usingModificationTimestampField)>

///////////////////////////////////////////////////
// <attr.fieldType.simpleName>
setter = <attr.fieldType.simpleName>.class.getDeclaredMethod("set<attr.fieldType.modificationTimestampField.ucName>", <attr.fieldType.modificationTimestampField.fieldType.simpleName>.class);
modifyTimestampSetters.put(<attr.fieldType.simpleName>.class, setter);
dateFieldTypes.put(setter, DateFieldType.<if(attr.fieldType.modificationTimestampField.stringField)>STRING);
stringDateFormats.put(setter, yieldDateFormat("<attr.fieldType.modificationTimestampField.modificationTimestampFormat>", dateFormatsByFormatString));
<elseif(attr.fieldType.modificationTimestampField.dateField)>DATE);
<elseif(attr.fieldType.modificationTimestampField.calendarField)>CALENDAR);
<endif>

<endif>

>>

@javaClass.extra_methods() ::= <<
protected Map\<Method, SimpleDateFormat\> getStringDateFormats() {
    return stringDateFormats;
}

protected Map\<Method, DateFieldType\> getDateFieldTypes() {
    return dateFieldTypes;
}
    
@PrePersist
public void prePersist(Object target) {
    Class\<?\> clazz = target.getClass();
    maintainDateField(target, clazz, createTimestampSetters);
    maintainDateField(target, clazz, modifyTimestampSetters);
}

@PreUpdate
public void preUpdate(Object target) {
    Class\<?\> clazz = target.getClass();
    maintainDateField(target, clazz, modifyTimestampSetters);
}

>>

