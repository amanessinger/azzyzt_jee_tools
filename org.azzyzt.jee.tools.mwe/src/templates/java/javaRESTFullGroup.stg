group javaRESTFullGroup : javaRESTRestrictedGroup;

@javaClass.extra_class_annotations() ::= <<
@Interceptors(RESTInterceptor.class)

>>

@javaClass.extra_methods() ::= <<
<if(generator.masterModel.generatingRestXml)>
<byIdHead(entity=mdt.properties.entity, dto=mdt.properties.dto, format="MediaType.APPLICATION_XML", suffix="")>
<byIdBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>

<allHead(entity=mdt.properties.entity, dto=mdt.properties.dto, format="MediaType.APPLICATION_XML", suffix="")>
<allBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>

<listHead(entity=mdt.properties.entity, dto=mdt.properties.dto, format="MediaType.APPLICATION_XML", suffix="")>
<listBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>

<storeHead(entity=mdt.properties.entity, dto=mdt.properties.dto, format="MediaType.APPLICATION_XML", suffix="")>
<storeBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>

<deleteHead(entity=mdt.properties.entity, dto=mdt.properties.dto, format="MediaType.APPLICATION_XML", suffix="")>
<deleteBody(entity=mdt.properties.entity, dto=mdt.properties.dto, result="\<result\\>OK\</result\\>")>

<endif>

<if(generator.masterModel.generatingRestJson)>
<byIdHead(entity=mdt.properties.entity, dto=mdt.properties.dto, format="MediaType.APPLICATION_JSON", suffix="Json")>
<byIdBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>

<allHead(entity=mdt.properties.entity, dto=mdt.properties.dto, format="MediaType.APPLICATION_JSON", suffix="Json")>
<allBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>

<listHead(entity=mdt.properties.entity, dto=mdt.properties.dto, format="MediaType.APPLICATION_JSON", suffix="Json")>
<listBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>

<storeHead(entity=mdt.properties.entity, dto=mdt.properties.dto, format="MediaType.APPLICATION_JSON", suffix="Json")>
<storeBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>

<deleteHead(entity=mdt.properties.entity, dto=mdt.properties.dto, format="MediaType.APPLICATION_JSON", suffix="Json")>
<deleteBody(entity=mdt.properties.entity, dto=mdt.properties.dto, result="{ result : \\\"OK\\\" }")>

<endif>

>>

storeHead(entity, dto, format, suffix) ::= <<
@POST
@Path("store<suffix>")
@Consumes(<format>)
@Produces(<format>)
public <dto.simpleName> <entity.lcFirstSimpleName>Store<suffix>(<dto.simpleName> dto)
    throws EntityNotFoundException, AccessDeniedException, EntityInstantiationException, 
           InvalidIdException, DuplicateProxyIdException, InvalidProxyIdException
>>

storeBody(entity, dto) ::= <<
{    
    return svcBean.<entity.lcFirstSimpleName>Store(dto);
}
>>

deleteHead(entity, dto, format, suffix) ::= <<
<if(entity.combinedId)>@POST<else>@GET<endif>
@Path("delete<suffix>")
<if(entity.combinedId)>
@Consumes(<format>)

<endif>
@Produces(<format>)
public String <entity.lcFirstSimpleName>Delete<suffix>(<if(entity.combinedId)><else>@QueryParam(value="id") <endif><dto.properties.idFieldType.simpleName> id)
    throws EntityNotFoundException, AccessDeniedException, EntityInstantiationException, InvalidIdException
>>

deleteBody(entity, dto, result) ::= <<
{    
    nocache();
    // in case of embedded IDs, the ID must be converted from the corresponding DTO
    svcBean.<entity.lcFirstSimpleName>Delete(id);
    return "<result>"; // Can't return void for a GET request
}
>>