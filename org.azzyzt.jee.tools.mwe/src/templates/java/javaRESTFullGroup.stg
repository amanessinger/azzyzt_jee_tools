<!
 * Copyright (c) 2011, Municipiality of Vienna, Austria
 *
 * Licensed under the EUPL, Version 1.1 or – as soon they
 * will be approved by the European Commission - subsequent
 * versions of the EUPL (the "Licence");
 * You may not use this work except in compliance with the
 * Licence.
 * 
 * For convenience a plain text copy of the English version 
 * of the Licence can be found in the file LICENCE.txt in
 * the top-level directory of this software distribution.
 * 
 * You may obtain a copy of the Licence in any of 22 European
 * Languages at:
 *
 * http://www.osor.eu/eupl
 *
 * Unless required by applicable law or agreed to in
 * writing, software distributed under the Licence is
 * distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied.
 * See the Licence for the specific language governing
 * permissions and limitations under the Licence.
 !>

<!
 * Code generation makes use of StringTemplate, which is
 * 
 * Copyright (c) 2008, Terence Parr
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or 
 * without modification, are permitted provided that the 
 * following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright 
 * notice, this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright 
 * notice, this list of conditions and the following disclaimer in 
 * the documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the author nor the names of its contributors 
 * may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 !>

group javaRESTFullGroup : javaGroup;

@javaClass.extra_class_annotations() ::= <<
@Interceptors(RESTInterceptor.class)

>>

@javaClass.extra_methods() ::= <<
<byIdHeadPp(entity=mdt.properties.entity, dto=mdt.properties.dto)>
<byIdBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>

<byIdHead(entity=mdt.properties.entity, dto=mdt.properties.dto)>
<byIdBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>

<allHead(entity=mdt.properties.entity, dto=mdt.properties.dto)>
<allBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>

<listHead(entity=mdt.properties.entity, dto=mdt.properties.dto)>
<listBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>

<storeHead(entity=mdt.properties.entity, dto=mdt.properties.dto)>
<storeBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>

<updateHead(entity=mdt.properties.entity, dto=mdt.properties.dto)>
<updateBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>

<deleteHeadPp(entity=mdt.properties.entity, dto=mdt.properties.dto)>
<deleteBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>

<deleteHead(entity=mdt.properties.entity, dto=mdt.properties.dto)>
<deleteBody(entity=mdt.properties.entity, dto=mdt.properties.dto)>
>>

byIdHeadPp(entity, dto) ::= <<
@GET
@Path("byIdPp/id={id}")
@Produces(MediaType.APPLICATION_XML)
public <dto.simpleName> <entity.lcFirstSimpleName>ByIdPp(@PathParam(value="id") <dto.properties.idFieldType.simpleName> id)
    throws EntityNotFoundException, AccessDeniedException, EntityInstantiationException, InvalidIdException
>>

byIdHead(entity, dto) ::= <<
@GET
@Path("byId")
@Produces(MediaType.APPLICATION_XML)
public <dto.simpleName> <entity.lcFirstSimpleName>ById(@QueryParam(value="id") <dto.properties.idFieldType.simpleName> id)
    throws EntityNotFoundException, AccessDeniedException, EntityInstantiationException, InvalidIdException
>>

byIdBody(entity, dto) ::= <<
{
    nocache();
    return svcFullBean.<entity.lcFirstSimpleName>ById(id);
}
>>

allHead(entity, dto) ::= <<
@GET
@Path("all")
@Produces(MediaType.APPLICATION_XML)
public List\<<dto.simpleName>\> <entity.lcFirstSimpleName>All()
    throws EntityNotFoundException, AccessDeniedException, EntityInstantiationException, InvalidIdException, InvalidFieldException, QuerySyntaxException, NotYetImplementedException
>>

allBody(entity, dto) ::= <<
{
    nocache();
    return svcFullBean.<entity.lcFirstSimpleName>List(new QuerySpec());
}
>>

listHead(entity, dto) ::= <<
@POST
@Path("list")
@Consumes(MediaType.APPLICATION_XML)
@Produces(MediaType.APPLICATION_XML)
public List\<<dto.simpleName>\> <entity.lcFirstSimpleName>List(String querySpecXml)
    throws AccessDeniedException, InvalidFieldException, QuerySyntaxException, NotYetImplementedException
>>

listBody(entity, dto) ::= <<
{
    return svcFullBean.<entity.lcFirstSimpleName>ListByXML(querySpecXml);
}
>>

storeHead(entity, dto) ::= <<
@POST
@Path("store")
@Consumes(MediaType.APPLICATION_XML)
@Produces(MediaType.APPLICATION_XML)
public String <entity.lcFirstSimpleName>Store(<dto.simpleName> dto)
    throws EntityNotFoundException, AccessDeniedException, EntityInstantiationException, InvalidIdException
>>

storeBody(entity, dto) ::= <<
{    
    return "\<result\>"+svcFullBean.<entity.lcFirstSimpleName>Store(dto)+"\</result\>";
}
>>

updateHead(entity, dto) ::= <<
@POST
@Path("update")
@Consumes(MediaType.APPLICATION_XML)
public void <entity.lcFirstSimpleName>Update(<dto.simpleName> dto)
    throws EntityNotFoundException, AccessDeniedException, EntityInstantiationException, InvalidIdException
>>

updateBody(entity, dto) ::= <<
{    
    svcFullBean.<entity.lcFirstSimpleName>Update(dto);
}
>>

deleteHeadPp(entity, dto) ::= <<
@GET
@Path("deletePp/id={id}")
@Produces(MediaType.APPLICATION_XML)
public String <entity.lcFirstSimpleName>DeletePp(@PathParam(value="id") <dto.properties.idFieldType.simpleName> id)
    throws EntityNotFoundException, AccessDeniedException, EntityInstantiationException, InvalidIdException
>>

deleteHead(entity, dto) ::= <<
@GET
@Path("delete")
@Produces(MediaType.APPLICATION_XML)
public String <entity.lcFirstSimpleName>Delete(@QueryParam(value="id") <dto.properties.idFieldType.simpleName> id)
    throws EntityNotFoundException, AccessDeniedException, EntityInstantiationException, InvalidIdException
>>

deleteBody(entity, dto) ::= <<
{    
    nocache();
    // in case of embedded IDs, the ID must be converted from the corresponding DTO
    svcFullBean.<entity.lcFirstSimpleName>Delete(id);
    return "\<result\>OK\</result\>"; // Can't return void for a GET request
}
>>