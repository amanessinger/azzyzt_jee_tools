group javaRESTRestrictedGroup : javaGroup;

@javaClass.extra_class_annotations() ::= <<
@Interceptors(RESTInterceptor.class)

>>

@javaClass.extra_methods() ::= <<
<if(generator.masterModel.generatingRestXml)>
<byIdHead(entity=mdt.properties.entity, dto=mdt.properties.dto, format="MediaType.APPLICATION_XML", suffix="")>
<byIdBody(entity=mdt.properties.entity, dto=mdt.properties.dto, msuffix=mdt.properties.svcBeanMethodSuffix)>

<allHead(entity=mdt.properties.entity, dto=mdt.properties.dto, format="MediaType.APPLICATION_XML", suffix="")>
<allBody(entity=mdt.properties.entity, dto=mdt.properties.dto, msuffix=mdt.properties.svcBeanMethodSuffix)>

<listHead(entity=mdt.properties.entity, dto=mdt.properties.dto, format="MediaType.APPLICATION_XML", suffix="")>
<listBody(entity=mdt.properties.entity, dto=mdt.properties.dto, msuffix=mdt.properties.svcBeanMethodSuffix)>

<endif>

<if(generator.masterModel.generatingRestJson)>
<byIdHead(entity=mdt.properties.entity, dto=mdt.properties.dto, format="MediaType.APPLICATION_JSON", suffix="Json")>
<byIdBody(entity=mdt.properties.entity, dto=mdt.properties.dto, msuffix=mdt.properties.svcBeanMethodSuffix)>

<allHead(entity=mdt.properties.entity, dto=mdt.properties.dto, format="MediaType.APPLICATION_JSON", suffix="Json")>
<allBody(entity=mdt.properties.entity, dto=mdt.properties.dto, msuffix=mdt.properties.svcBeanMethodSuffix)>

<listHead(entity=mdt.properties.entity, dto=mdt.properties.dto, format="MediaType.APPLICATION_JSON", suffix="Json")>
<listBody(entity=mdt.properties.entity, dto=mdt.properties.dto, msuffix=mdt.properties.svcBeanMethodSuffix)>

<endif>
>>

byIdHead(entity, dto, format, suffix) ::= <<
<if(entity.combinedId)>@POST<else>@GET<endif>
@Path("byId<suffix>")
<if(entity.combinedId)>
@Consumes(<format>)

<endif>
@Produces(<format>)
public <dto.simpleName> <entity.lcFirstSimpleName>ById<suffix>(<if(entity.combinedId)><else>@QueryParam(value="id") <endif><dto.properties.idFieldType.simpleName> id)
    throws EntityNotFoundException, AccessDeniedException, EntityInstantiationException, InvalidIdException
>>

byIdBody(entity, dto, msuffix) ::= <<
{
    nocache();
    return svcBean.<entity.lcFirstSimpleName>ById<msuffix>(id);
}
>>

allHead(entity, dto, format, suffix) ::= <<
@GET
@Path("all<suffix>")
@Produces(<format>)
public List\<<dto.superMetaClass.simpleName>\> <entity.lcFirstSimpleName>All<suffix>()
    throws EntityNotFoundException, AccessDeniedException, EntityInstantiationException, InvalidIdException, InvalidFieldException, QuerySyntaxException, NotYetImplementedException
>>

allBody(entity, dto, msuffix) ::= <<
{
    nocache();
    return svcBean.<entity.lcFirstSimpleName>List<msuffix>(new QuerySpec());
}
>>

listHead(entity, dto, format, suffix) ::= <<
@POST
@Path("list<suffix>")
@Consumes(<format>)
@Produces(<format>)
public List\<<dto.superMetaClass.simpleName>\> <entity.lcFirstSimpleName>List<suffix>(String querySpecXml)
    throws AccessDeniedException, InvalidFieldException, QuerySyntaxException, NotYetImplementedException
>>

listBody(entity, dto, msuffix) ::= <<
{
    return svcBean.<entity.lcFirstSimpleName>ListByXML<msuffix>(querySpecXml);
}
>>